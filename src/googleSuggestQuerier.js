var request = require('request');
var syncRequest = require('sync-request');
var readline = require('readline');
var fs = require('fs');
var path = require('path');
var LineByLineReader = require('line-by-line');


/**
 * Read a set of data file and query google suggest
 */
module.exports = function (confFilePath) {
    var conf = require(confFilePath);

    var queriedDataDirectoryPath = conf["queriedDataDirectoryPath"];

    var _log = {
        fileWrite: function (word, suggestions, file) {
            console.log("[" + word + "] Writing suggestions to " + file + ". Suggestions : " + suggestions);
        },
        errorRequest: function (url, query, explain) {
            console.error("[" + query + "] (" + url + ") : " + explain);
        }
    };

    var _request = {
        build_url: function (query, language) {
            if (typeof language !== "string" || language.length == 0) {
                language = "en";
            }
            return "http://suggestqueries.google.com/complete/search?client=firefox&q=" + query + "&hl=" + language;
        },
        sync: function (query, language) {
            var url = this.build_url(query, language);
            var res = syncRequest('GET', url);
            switch (res.statusCode) {
                case 403:
                    return false;
                    break;
                case 200:
                    return res.getBody().toString();
                    break;
                default:
                    _log.errorRequest(url, query, "Don't know how to handle status code " + res.statusCode);
                    break;
            }
        },
        async: function (query, language, callback) {
            var url = this.build_url(query, language);
            request(url, function (error, response, body) {
                if (!error && response.statusCode == 200) {
                    callback(body, url);
                }
                else {
                    callback(false, url);
                }
            });
        }
    };

    var _gSuggest = {
        normalizeBodySuggestionResponse: function (body) {
            try {
                body = typeof body === "string" ? JSON.parse(body) : body;
                if (typeof body === "object" && typeof body.length === "number" && body.length > 0) {
                    body = body[1];
                } else if (typeof body !== "boolean") {
                    body = [];
                }
                return body;
            } catch (e) {
                console.error("------");
                console.error("Error for word '" + word + "' : ");
                console.error(body);
                console.error(e);
                console.error("------");
            }
        },
        getSuggestionsAsync: function (word, cb) {
            var that = this;
            _request.async(word, 'fr', function (body) {
                cb(that.normalizeBodySuggestionResponse(body));
            });
        },
        getSuggestionsSync: function (word) {
            var body = _request.sync(word, 'fr');
            return this.normalizeBodySuggestionResponse(body);
        }
    };

    var _files = {
        getStringToWrite: function (word, suggestions) {
            return word + " > " + suggestions + "\n";
        },
        writeSuggestionSync: function (word, suggestions, file) {
            _log.fileWrite(word, suggestions, file);
            fs.appendFileSync(file, this.getStringToWrite(word, suggestions));
        },
        writeSuggestionAsync: function (word, suggestions, file, cb) {
            _log.fileWrite(word, suggestions, file);
            fs.appendFile(file, this.getStringToWrite(word, suggestions), function (err) {
                if (err) throw err;
                cb();
            });
        },
        /**
         * Files generated by combinationsGenerator.js
         * @param cb
         */
        getCombinationFiles: function (cb) {
            var dirPath = conf["generatedDataDirectoryPath"];
            var output = [];
            fs.readdir(dirPath, function (err, files) {
                if (err) {
                    throw err;
                }

                files.map(function (file) {
                    return path.join(dirPath, file);
                }).filter(function (file) {
                    return fs.statSync(file).isFile();
                }).forEach(function (file) {
                    output.push(file);
                });
                cb(output);
            });
        },
        readLineSync: function (filePath, actionOnEachLine) {
            var fd = fs.openSync(filePath, 'r');
            var bufferSize = 1024;
            var buffer = new Buffer(bufferSize);

            var leftOver = '';
            var read, line, idxStart, idx;
            while ((read = fs.readSync(fd, buffer, 0, bufferSize, null)) !== 0) {
                leftOver += buffer.toString('utf8', 0, read);
                idxStart = 0;
                while ((idx = leftOver.indexOf("\n", idxStart)) !== -1) {
                    line = leftOver.substring(idxStart, idx);
                    actionOnEachLine(line);
                    idxStart = idx + 1;
                }
                leftOver = leftOver.substring(idxStart);
            }
        },
        readFileAsync: function (filePath, actionOnEachLine, actionOnClose) {
            var lr = new LineByLineReader(filePath);
            lr.on('error', function (err) {
                throw err;
            });

            lr.on('line', function (line) {
                actionOnEachLine(line);
            });

            lr.on('end', function () {
                actionOnClose();
            });
            return lr;
        }
    };

    var _process = {
        sync: function (inputFile, outputFile) {
            var suggestions;
            _files.readLineSync(inputFile, function (line) {
                suggestions = _gSuggest.getSuggestionsSync(line);
                _files.writeSuggestionSync(line, suggestions, outputFile);
            });
        },
        async: function (inputFile, outputFile, cb) {
            var MAX_NB_SOCKETS = 15;
            var CURRENT_NB_SOCKETS = 0;
            var queueLines = [];

            var lineReader = _files.readFileAsync(inputFile, function (line) {
                onLineRead(line);
            }, function () {
                console.log("closing " + inputFile);
                cb();
            });

            var state = function (f) {
                console.log(CURRENT_NB_SOCKETS + "/" + MAX_NB_SOCKETS + "  Q=" + queueLines.length + " from : " + f);
            };

            var onLineRead = function (line) {
                if (MAX_NB_SOCKETS == CURRENT_NB_SOCKETS) {
                    // Can't send the current query, need to wait for another query to resolve
                    queueLines.push(line);
                    lineReader.pause();
                    state("Block Reader " + line);
                } else {
                    CURRENT_NB_SOCKETS++;
                    state("Socket Send " + line);
                    _gSuggest.getSuggestionsAsync(line, function (suggestions) {
                        CURRENT_NB_SOCKETS--;
                        state("Socket resolve " + line);
                        if (suggestions === false) {
                            // Blocked by google. Need to wait
                            var nbMsWait = 60000;
                            lineReader.pause();
                            console.log("[" + line + "] Google is blocking our requests. Let's wait " + nbMsWait + " milliseconds.");
                            setTimeout(function () {
                                onLineRead(line)
                            }, nbMsWait);
                        } else {
                            _files.writeSuggestionAsync(line, suggestions, outputFile, function () {
                                // Check the queue
                                if (queueLines.length > 0) {
                                    onLineRead(queueLines.pop());
                                } else {
                                    // Read the next line
                                    state("Resume Reader ");
                                    lineReader.resume();
                                }
                            });
                        }
                    });
                }
            };
        }
    };

    return {
        sync: function () {
            _files.getCombinationFiles(function (files) {
                for (var idx = 0; idx < files.length; idx++) {
                    var f = files[idx];
                    var of = queriedDataDirectoryPath + "/queried_" + path.basename(f);
                    _process.sync(f, of);
                }
            });
        },
        async: function () {
            _files.getCombinationFiles(function (files) {
                var loop = function (files, idx) {
                    var f = files[idx];
                    var of = queriedDataDirectoryPath + "/queried_" + path.basename(f);
                    _process.async(f, of, function () {
                        idx++;
                        if (idx < files.length) {
                            loop(files, idx);
                        }
                    });
                };
                if (files.length > 0) {
                    loop(files, 0);
                }
            });
        }
    };
};